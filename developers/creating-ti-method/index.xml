<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Creating a TI method on dynverse</title>
    <link>/developers/creating-ti-method/</link>
    <description>Recent content in Creating a TI method on dynverse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/developers/creating-ti-method/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating a trajectory</title>
      <link>/developers/creating-ti-method/create_ti_method_wrappers/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/developers/creating-ti-method/create_ti_method_wrappers/</guid>
      <description>Common trajectory model dynwrap always represents trajectories in the same way, as illustrated here with a tree trajectory
 Milestone network, contains information of connections between milestones  ## # A tibble: 5 x 4 ## from to length directed ## &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;lgl&amp;gt; ## 1 Milestone_A Milestone_B 1 FALSE ## 2 Milestone_B Milestone_C 2 FALSE ## 3 Milestone_B Milestone_D 1 FALSE ## 4 Milestone_C Milestone_E 1 FALSE ## 5 Milestone_C Milestone_F 1.</description>
    </item>
    
    <item>
      <title>Wrapping in R</title>
      <link>/developers/creating-ti-method/create_ti_method_r/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/developers/creating-ti-method/create_ti_method_r/</guid>
      <description>library(dynwrap) This vignette describes how to include your own method into the dynverse workflow. We’ll illustrate this with a very basic method: using one of the components of a PCA as the pseudotime.
A method defined in R has two parts: a definition and a function.
Definition The definition contains information on the method, its parameters and its required or optional inputs. The possibilities are quite extensive (see dynwrap::definition()), but essentials are:</description>
    </item>
    
    <item>
      <title>Wrapper script</title>
      <link>/developers/creating-ti-method/create_ti_method_script/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/developers/creating-ti-method/create_ti_method_script/</guid>
      <description>library(dynwrap) An alternative to wrapping a script inside R, is to wrap it using an external script. Because this does not provide any dependency management, this is not really useful for method end-users, but rather as a way to easily develop a TI method and to ultimately step up towards containerised wrapping.
Similarly as a wrapper written in R, you’ll need to provide both a definition (= a definition.yml) and a way to run the methods (= a script).</description>
    </item>
    
    <item>
      <title>Containerised wrapping</title>
      <link>/developers/creating-ti-method/create_ti_method_container/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/developers/creating-ti-method/create_ti_method_container/</guid>
      <description>library(dynwrap) library(dplyr) Once you have wrapped a method using a script and definition, all you need to share your method is a Dockerfile which lists all the dependencies that need to be installed.
We’ll work with the following definition.yml:
definition.yml  method: id: comp_1 parameters: - id: component default: 1 type: integer distribution: type: uniform lower: 1 upper: 10 description: The nth component to use wrapper: input_required: expression input_optional: start_id  and run.</description>
    </item>
    
  </channel>
</rss>